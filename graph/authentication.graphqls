scalar Time
scalar Upload

directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

type Query {
    login(accountName: String!, password: String!): String!
    gameByID(id: ID!): Game!
    getGame: [Game]!
    getPromo(gameID: ID!): Promo!
    getUser(jwtToken: String!): User!
    getPointsItem: [PointItem]!
    getCommunityAsset: [CommunityAsset]!
    getCommunityAssetByID(id: ID!): CommunityAsset!
    getCommunityReview: [Review]!
    getReviewByID(id: ID!): Review!
    getDiscussion: [Discussion]!
    getDiscussionByID(id: ID!): Discussion!
    getRedeemCode(code: String!): RedeemCode!
    getGameItem(page: Int!): [GameItem]!
    getGameItemByID(id: ID!): GameItem!
    getMarketGameItemByID(id: ID!): [MarketGameItem]!
    getMarketListing: [MarketListing]!
    getAllUser(page: Int!): [User]!
    getAllGame: [Game]!
    getReportRequest: [ReportRequest!]!
    getUnsuspensionRequest: [UnsuspensionRequest!]!
    getSuspensionList: [SuspensionList!]!
    deleteReport(id: ID!): String!
    getCardByID(id: ID!): [Card]!
    getCard: [Card]!
    getAllActivities(page: Int!): [Activities]!
}

type Mutation {
    register(input: Register!): User!
    createGame(input: newGame!): Game!
    deleteGame(id: ID!): Game!
    updateGame(input: updateGame!): Game!
    insertPromo(input: newPromo!): Promo!
    deletePromo(id: ID!): Promo!
    updatePromo(input: newPromo!): Promo!
    insertPointsItem(input: newPointItem!): PointItem!
    insertCommunityAsset(input: newCommunityAsset!): CommunityAsset!
    likeCommunityAsset(id: ID!): CommunityAsset!
    dislikeCommunityAsset(id: ID!): CommunityAsset!
    insertCommunityComment(input: newCommunityComment): CommunityAssetComment!
    insertReview(input: newReview): Review!
    insertReviewComment(input: newReviewComment): ReviewComment!
    insertDiscussion(input: newDiscussion): Discussion!
    insertDiscussionComment(input: newDiscussionComment): DiscussionComment!
    insertPointTransaction(userID: ID!, itemID: ID!): Boolean!
    updateUser(input: updateUser): User!
    updateAvatar(id: ID!, profilePic: String!): User!
    updateTheme(id: ID!, theme: String!): User!
    updateFrame(id: ID!, frameID: ID!): User!
    sendOTP(input: Int!): Int
    insertRedeemCode(code: String!, amountMoney: Int!): RedeemCode!
    helpfulReview(id: ID!): Review!
    notHelpfulReview(id: ID!): Review!
    updateBackground(id: ID!, backgroundID: ID!): User!
    redeemWalletCode(code: String!, userID: ID!): User!
    updateBadge(id: ID!, badgeID: ID!): User!
    updateMiniBackground(id: ID!, miniBgID: ID!): User!
    insertBuyItem(userID: ID!, gameItemID: ID!, buyerID: ID!): String!
    insertSellItem(userID: ID!, gameItemID: ID!, sellerID: ID!): String!
    insertMarketItem(input: newMarketItem!): MarketGameItem!
    addWalletAmount(userID: ID!, amount: Int!): User!
    reduceWalletAmount(userID: ID!, amount: Int!): User!
    insertCommunityVidImg(imgVid: String!, userID: ID!): CommunityAsset!
    insertNewReview(userID: ID!, gameID: ID!, desc: String!, recommend: Boolean!): Review!
    createUnsuspensionRequest(input: InputUnsuspensionRequest!): UnsuspensionRequest!
    createReportRequest(input: InputRequestReport!):ReportRequest!
    addReported(input: ID!): User!
    createSuspensionList(input: InputSuspensionList!): String!
    insertUserChat(message: String!, userID: ID!): String!
}

input Register {
    accountName: String!
    password: String!
}

type User {
    id: ID!
    accountName: String!
    points: Int!,
    profilePic: String!,
    displayName: String!,
    realName: String!,
    country: String!,
    customURL: String!,
    summary: String!,
    theme: String!
    frameID: Int,
    frame: PointItem,
    ownedFrame: [PointItem]!,
    wallet: Int!
    backgroundID: Int,
    background: PointItem,
    ownedBackground: [PointItem]!
    badgeID: Int,
    badge: PointItem,
    ownedBadge: [PointItem]!
    miniBackgroundID: Int!,
    miniBackground: PointItem,
    ownedMiniBackground: [PointItem]!
    suspended: Boolean
    reported: Int!
    friends: [Friends]!
    friendRequest: [FriendRequest]!
    level: Int!
}

type Game {
    id: ID!,
    gameTitle: String!,
    gameDescription: String!,
    gamePrice: Int!,
    createdAt: Time!,
    gamePublisher: String!,
    gameDeveloper: String!,
    gameTag: String!,
    gameSystemRequirement: String!,
    gameAdult: Boolean!,
    gameBanner: Int!,
    gameSlideshow: [GameMedia!]!
    promo: Promo
    mostHouredPlayed: Int!
}

type GameMedia {
    id: ID!,
    contentType: String!
}

input newGame {
    gameTitle: String!,
    gameDescription: String!,
    gamePrice: Int!,
    gamePublisher: String!,
    gameDeveloper: String!,
    gameTag: String!,
    gameAdult: Boolean!,
    gameSystemRequirement: String!,
    gameBanner: Upload!,
    gameSlideshow: [Upload!]!
}

input updateGame {
    id: ID!,
    gameTitle: String!,
    gameDescription: String!,
    gamePrice: Int!,
    gamePublisher: String!,
    gameDeveloper: String!,
    gameTag: String!,
    gameAdult: Boolean!,
    gameSystemRequirement: String!,
    gameBanner: Upload,
    gameSlideshow: [Upload]
}

type Promo {
    id: ID!,
    discountPromo: Int!,
    endDate: Time!
}

input newPromo {
    gameID: ID!,
    discountPromo: Int!,
    endDate: Time!
}

type PointItem {
    id: ID!,
    itemImg: String!,
    itemPoints: Int!
    itemType: String!
}

input newPointItem {
    id: ID!,
    itemImg: String!,
    itemPoints: Int!,
    itemType: String!
}

type CommunityAsset {
    id: ID!,
    asset: String!,
    like: Int!,
    dislike: Int!,
    user: User! @goField(forceResolver: true),
    comments(page: Int!): [CommunityAssetComment]! @goField(forceResolver: true)
}

input newCommunityAsset {
    id: ID!,
    itemImg: String!,
    itemPoints: Int!
}

type CommunityAssetComment {
    id: ID!,
    comment: String!,
    user: User! @goField(forceResolver: true)
}

input newCommunityComment {
    id: ID!,
    comment: String!,
    userID: ID!
}

type Review {
    id: ID!,
    user: User! @goField(forceResolver: true),
    game: Game! @goField(forceResolver: true),
    description: String!,
    recommended: Boolean!,
    upvote: Int!,
    downvote: Int!,
    comments(page: Int!): [ReviewComment]! @goField(forceResolver: true),
    helpful: Int!,
    notHelpful: Int!
}

input newReview {
    id: ID!,
    userID: ID!,
    gameID: ID!,
    description: String!,
    recommended: Boolean!,
}

type ReviewComment {
    id: ID!,
    comment: String!,
    user: User! @goField(forceResolver: true)
}

input newReviewComment {
    id: ID!,
    comment: String!,
    userID: ID!
}

type Discussion {
    id: ID!,
    user: User! @goField(forceResolver: true),
    game: Game! @goField(forceResolver: true),
    title: String!,
    description: String!,
    comments(page: Int!): [DiscussionComment]! @goField(forceResolver: true)
}

input newDiscussion {
    id: ID!,
    userID: ID!,
    gameID: ID!,
    title: String!,
    description: String!,
}

type DiscussionComment {
    id: ID!,
    comment: String!,
    user: User! @goField(forceResolver: true)
}

input newDiscussionComment {
    id: ID!,
    comment: String!,
    userID: ID!
}

input updateUser {
    id: ID!,
    displayName: String!,
    realName: String!,
    customURL: String!,
    country: String!,
    summary: String!
}

type RedeemCode {
    code: String!,
    moneyAmount: Int!
}

type GameItem {
    id: ID!,
    gameID: ID!,
    gameItemName: String!,
    gameItemImg: String!,
    gameItemDesc: String!
    game: Game! @goField(forceResolver: true)
    transaction: [MarketTransaction]!
}

type MarketGameItem {
    price: Int!
    type: String!
    gameItemID: ID!
    gameItem: GameItem! @goField(forceResolver: true)
    userID: ID!
    user: User! @goField(forceResolver: true)
}

type MarketListing {
    userID: ID!
    user: User! @goField(forceResolver: true)
    gameItemID: ID!
    gameItem: GameItem! @goField(forceResolver: true)
    price: Int!
    type: String!
}

input newMarketItem {
    userID: ID!
    gameItemID: ID!
    type: String!
    price: Int!
}

type MarketTransaction {
    gameItemID: ID!,
    price: Int!,
    createdAt: Time!
}

type Subscription{
    messageAdded(itemID: Int!): String!
    privateChatAdded(userID: ID!): String!
}

type Inventory {
    id: ID!,
    userID: ID!,
    gameItemID: ID!
}

type UnsuspensionRequest{
    user_id: ID!
    reason: String!
    user: User! @goField(forceResolver: true)
}

input InputUnsuspensionRequest{
    user_email: String!
    reason: String!
}

type ReportRequest{
    id: ID!
    reporter_id: ID!
    reporter: User! @goField(forceResolver: true)
    suspected_id: ID!
    suspected: User! @goField(forceResolver: true)
    reason: String!
}

input InputRequestReport{
    reporter_id: ID!
    suspected_id: ID!
    reason: String!
}

type SuspensionList{
    user_id: ID!
    user:User!  @goField(forceResolver: true)
    reason: String!
    suspended: Boolean!
}

input InputSuspensionList{
    user_id: ID!
    reason : String!
    suspended: Boolean!
}

type Friends {
    userID: ID!
    friendID: ID!
    user: User! @goField(forceResolver: true)
    friend: User! @goField(forceResolver: true)
}

type FriendRequest {
    userID: ID!
    friendID: ID!
    user: User! @goField(forceResolver: true)
    friend: User! @goField(forceResolver: true)
}

type Card {
    id: ID!,
    badgeID: Int,
    badge: PointItem,
    ownedBadge: [PointItem]!
    cardImg: String!
    status: String!
}

type Activities {
    id: ID!
    userID: ID!
    activity: String!
}